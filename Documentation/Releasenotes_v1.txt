RELEASENOTES BASE LIBARY
========================

This base library has been created out of common classes from the Marlin, SQLComponents,
StyleFramework, bcd, StringIntegration and other projects on https://github.com/edwig
By doing so, the maintenancae of these libraries is strongly simplified.
Source project directories can be replaced in target projects bij simply replacing the
whole directory including the VS project files. 
Target projects are at least "Kwatta", "OpenODBCQuerytool", "Marlin", "CXHibernate".
But many more open source and commercial projects exist that use this base library.

Version 1.0.0 of 18-03-2022
---------------------------
Initial version of this library

Version 1.0.1 of 08-04-2022
---------------------------
1) Added method "XMLMessage::CleanUpElement". This cleans up elements that are empty.
   That is; elements that have no payload value AND no child elements.
   Returns 'true' if element is removed, otherwise 'false'
2) Added method "SOAPMessage::CleanUp". This cleans up elements that are empty below 
   the parameters-node (first node in the soap "Body"). This method uses the 
   XMLMessage::CleanUpElement method mentioned above.
3) In case of an invalid soapAction name, the first node within the body of a SOAPMessge
   will now be generated as 'SoapAction'.

Version 1.0.2 of 27-04-2022
---------------------------
1)  Verious additions to MultiPartBuffer to accomodate OData 4.0 "$batch" mechanisms
    of cascading multipart/mixed buffers for changesets of data
2)  Assignment operator for a JSON message to a HTMLMessage
3)  Small memory fixes for FileBuffer1
4)  Additions to SOAPMessage to support WS-Security UsernameTokenProfile.

Version 1.0.3 of 16-06-2022
---------------------------
1) Added Max-Age attribute to Cookies for the HTTPSite.
2) Added an extra SetCookie() method for HTTPMessage containing ALL the cookie attriutes
3) Added the "AddSecondsToSystemTime" function for calculating the expiration time of cookies
4) Added extra HTTP status codes from the MDN network to the HTTPError system

Version 1.0.4 of 24-07-2022
---------------------------
1) Changed all *.c files to *.cpp to stop the linker from complaining about PDB symbols
2) Fixed HTTPMessage reading bug. Now reading always in 'text' mode for XML files
3) Support for headers inside the Multpart/Mixed buffers

Version 1.0.5 of 29-09-2022
---------------------------
1) Added the WideMessageBox, to be able to display standard MessageBox in a wider format
   than was allowed since Windows-Vista
2) Ran Code-Analyze with the standard "Microsoft Native code rule" set, and corrected
   a lot of little bugs and quirks. Now compiles with "Code analysis" without errors or 
   warnings in this extended ruleset.
3) Dynamic version of the alert files registration of paths to create the alertfiles on.

Version 1.0.6 of 13-10-2022
---------------------------
1) Added a XStringBuilder class
2) Eventlog registration has changed to make it more robust. No pre-start and cleanup code
   needs to be called any more in your application. Just make calls to a service log request.
3) Smal fix for "AlertLogPath" to get the highest module also

Version 1.0.7 of 01-11-2022
---------------------------
1) Added filter capabilities to JSONPath. You can now use the "$.(?<filter>)" form with the
   following operators: &&, ||, ==, !=, <, >, <= and >=

Version 1.0.8 of 11-12-2022
---------------------------
1) QueryReWriter now can warn against old-style Oracle outer joins with the (+) syntax
   by setting the SROption::SRO_WARN_OUTER options
2) QueryReWriter is made MUCH faster by combining all the caches into one cache,
   so just only one std::map lookup needs to be made to parse a token
3) QueryReWriter is made re-entrant, so we can parse more queries against one
   instance of the class
4) QueryReWriter now can parse standard ISO SQL '||' string concatenation to the 
   '+' syntax of other database engines (MS SQLServer!)
5) Added ODBC escapes to the QueryReWriter class with the "{fn function()}" syntax.
6) Added all ODBC escapes 
7) Added StringUtilities with various support functions for XString

Version 1.0.9 of 19-03-2023
---------------------------
1)  ReWrite of the bcd code. It now has a silent failure mode to support
    IEEE-745 INF (infinity), -INF (negative inifinity) and NaN 
    (Not a Number) statusses as well as the database NULL status
2)  ReWrite of the bcd code. It no longer needs the precision and scale
    These will be calculated automatically when converting a bcd to a 
    database SQL_NUMERCIC_STRUCT.
3)  Fix for unstable RunRedirect and Redirect. 
    When starting a program in the background with re-directed input/output
    we must wait for the stdout to drain completely, before we shutdown
    the child process.
    Programs TestFilter and TestRedirect are meant to test this.
4)  WinPing has been upgraded to never print to 'stderr' any more in case of errors.
    all error situations now go the the 'errorbuffer' as specified in the function call.

Version 1.1.0 of 09-04-2023
---------------------------
1)  Added the XSDSchema class. *.xsd schema's can be read from and written back to file
    XMLMessages can be validated against this schema. A life test example from the 
    'ketenstandard' has been added in the unit tests.

Version 1.2.0 of 23-07-2023
---------------------------
1)  Fully checked with CPPCheck 2.11
    As much as possible of all category "errors", "warnings", "style" and "performance"
    removed from the source code. A 'BaseLibrary.cppcheck' project file is checked in
2)  As a result of the CCPCheck, many declarations are now 'const reference'
    Beware as you take this version into production on another project
3)  Fully Unicode (UTF-16 and UTF-8) aware
    Can both be compiled in MBCS mode or in Unicode mode and can process files 
    in UTF-8, UTF-16-LE and UTF-16-BE mode with according byte-order-marks (BOM)
    
Version 1.2.1 of 26-09-2023
---------------------------
1)  Added a streaming interface to WinFile. You can now << 'add a string to a file'
    or you can read a string form 'file >> string_var'.
    Other datatypes are TCHAR, short, int, unsigned, INT64, float, double and LPCTSTR.
2)  Added Set/Get XMLHttpRequest to the HTTPMessage class.
    Here we can retain the "X-Requested-With: XMLHttpRequest" header for the Marlin server.
    This triggers a CORS pre-flight in case of an Ajax request.
3)  Extended the XSD restriction check on double datattype to handle 0.0 correctly.
4)  Extended the XSD restriction check on base64Binary fields to include whitespace 
    and '/' and '+' characters.

Version 1.3.0 of 03-11-2023
---------------------------
1)  BaseLibrary now supports MBCS/Unicode compilation units. 
    Fully tested in UTF-16 Unicode mode
2)  Unit tests from the MarlinClient are moved to this library.
3)  Tested with SQLComponents in the ODBC Querytool and with Marlin IIS internet servers